model: {
  second: {
    network_class_name: "VoxelNet"
    voxel_generator {
      full_empty_part_with_mean: false
      point_cloud_range : [-50, -50, -10, 50, 50, 10]

      # self.sa1 = PointNetSetAbstractionMsg(20, [0.1, 0.2], [10, 15], 0, [[32, 64], [64, 128]])
      # self.sa2 = PointNetSetAbstraction(None, None, None, 192 + 3, [64, 128], True)
      # voxel_size : [.75, .75, 20]
      # max_number_of_points_per_voxel : 64
      # loss not converging, AP not going up
      # model_dir: pp2_model_dir_v0.75

      # self.sa1 = PointNetSetAbstractionMsg(40, [0.2, 0.4], [20, 30], 0, [[32, 64], [64, 128]]) (out of memory)
      # self.sa1 = PointNetSetAbstractionMsg(25, [0.2, 0.35], [20, 30], 0, [[32, 64], [64, 128]]) (loss not converging, no good eval)
      # self.sa2 = PointNetSetAbstraction(None, None, None, 192 + 3, [64, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 120
      # loss not converging, AP not going up
      # model_dir: pp2_model_dir_v1

      # self.sa1 = PointNetSetAbstractionMsg(64, [0.2, 0.4], [16, 32], 0, [[32, 64], [64, 128]])  
      # self.sa1_2 = PointNetSetAbstractionMsg(16, [0.4, 0.8], [16, 32], 64+128, [[64, 128], [128, 256]])    
      # self.sa2 = PointNetSetAbstraction(None, None, None, 128+256 + 3, [256, 128], True)
      # voxel_size : [2, 2, 20]
      # max_number_of_points_per_voxel : 256
      # model_dir: pp2_model_dir_v2

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.2, 0.4, 0.7], [3, 5, 9], 0, [[16, 32, 64], [32, 32, 64], [32, 64, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_v1.0_v2

      # self.sa0 = PointNetSetAbstractionMsg(20, [0.2, 0.4, 0.7], [3, 5, 9], 0, [[32, 32, 64], [48, 48, 96], [48, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+96+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_v1.0_v2_2

      # self.sa0 = PointNetSetAbstractionMsg(15, [0.2, 0.4, 0.7], [5, 7, 11], 0, [[32, 32, 64], [48, 48, 96], [48, 96, 128]])     
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+96+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_v1.0_v2_3

      # self.sa0 = PointNetSetAbstractionMsg(20, [0.2, 0.4, 0.7], [7, 9, 13], 0, [[32, 32, 64], [48, 48, 96], [48, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+96+128 + 3, [256, 256, 128], True)
      # point_cloud_range : [-16, -16, -10, 16, 16, 10]
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 2048
      # model_dir: pp2_model_dir_v1.0_v2_4

      # self.sa0 = PointNetSetAbstractionMsg(20, [0.2, 0.4, 0.7], [7, 9, 13], 0, [[32, 32, 64], [48, 48, 96], [48, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+96+128 + 3, [256, 256, 128], True)
      # point_cloud_range : [-20, -20, -10, 20, 20, 10]
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 2048
      # model_dir: pp2_model_dir_v1.0_v2_5

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.2, 0.4, 0.7], [3, 5, 9], 0, [[16, 32, 64], [32, 32, 64], [32, 64, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_c10_v1

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.2, 0.4, 0.7], [5, 7, 9], 0, [[16, 32, 64], [32, 32, 64], [32, 64, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_c10_v2

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.35, 0.55, 0.85], [3, 5, 9], 0, [[16, 32, 64], [32, 32, 64], [32, 64, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_c10_v3

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.35, 0.55, 0.85], [5, 7, 9], 0, [[16, 32, 64], [32, 32, 64], [32, 64, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [256, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_c10_v4

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.32, 0.36, 0.4], [5, 7, 9], 0, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      # voxel_size : [0.5, 0.5, 20]
      # max_number_of_points_per_voxel : 250
      # model_dir: pp2_model_dir_c10_v5

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.32, 0.36, 0.4], [5, 7, 9], 0, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      # voxel_size : [0.5, 0.5, 20]
      # max_number_of_points_per_voxel : 512
      # model_dir: pp2_model_dir_c10_v6

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.35, 0.55, 0.85], [8, 10, 15], 0, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      # voxel_size : [1, 1, 20]
      # max_number_of_points_per_voxel : 1024
      # model_dir: pp2_model_dir_c10_v7

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.32, 0.36, 0.4], [6, 8, 10], 6, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      # voxel_size : [0.5, 0.5, 20]
      # max_number_of_points_per_voxel : 512
      # model_dir: pp2_model_dir_v0.5_p512

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.32, 0.36, 0.4], [6, 8, 10], 6, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      # voxel_size : [0.5, 0.5, 20]
      # max_number_of_points_per_voxel : 512
      # model_dir: pp2_model_dir_v0.5_p512_Threshold10 Threshold 10 points for pointnet bypass

      # self.sa0 = PointNetSetAbstractionMsg(10, [0.32, 0.36, 0.4], [6, 8, 10], 6, [[16, 32, 48, 64], [32, 32, 48, 64], [32, 64, 96, 128]])   
      # self.sa1 = PointNetSetAbstraction(None, None, None, 64+64+128 + 3, [512, 256, 128], True)
      voxel_size : [1, 1, 20]
      max_number_of_points_per_voxel : 1536
      # model_dir: pp2_model_dir_v1.0_p1536_Threshold50
    }
    voxel_feature_extractor: {
      module_class_name: "PillarFeatureNet2_MSG"
      num_filters: [64, 128]
      with_distance: false
      num_input_features: 4
    }
    middle_feature_extractor: {
      module_class_name: "PointPillarsScatter"
      downsample_factor: 1
      num_input_features: 128
    }
    rpn: {
      module_class_name: "RPNV2"
      layer_nums: [3, 5, 5]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [0.25, 0.5, 1]
      num_upsample_filters: [128, 128, 128]
      use_groupnorm: false
      num_groups: 32
      num_input_features: 128
    }
    loss: {
      classification_loss: {
        weighted_sigmoid_focal: {
          alpha: 0.25
          gamma: 2.5
          anchorwise_output: true
        }
      }
      localization_loss: {
        weighted_smooth_l1: {
          sigma: 3.0
          code_weight: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
        }
      }
      classification_weight: 1.0
      localization_weight: 2.0
    }
    num_point_features: 4 # model's num point feature should be independent of dataset
    # Outputs
    use_sigmoid_score: true
    encode_background_as_zeros: true
    encode_rad_error_by_sin: true
    sin_error_factor: 1.0

    use_direction_classifier: true
    direction_loss_weight: 0.2
    num_direction_bins: 2
    direction_limit_offset: 0
    direction_offset: 0.78

    # Loss
    pos_class_weight: 1.0
    neg_class_weight: 1.0

    loss_norm_type: NormByNumPositives
    # Postprocess
    post_center_limit_range: [-59.6, -59.6, -10, 59.6, 59.6, 10]
    nms_class_agnostic: true # only valid in multi-class nms
    box_coder: {
      ground_box3d_coder: {
        linear_dim: false
        encode_angle_vector: false
      }
    }
    target_assigner: {
      class_settings: {
        class_name: "car"
        anchor_generator_range: {
          sizes: [1.95017717, 4.60718145, 1.72270761] # wlh
          anchor_ranges: [-50, -50, -0.93897414, 50, 50, -0.93897414]
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
          # custom_values: [0, 0] # velocity vector base value
        }
        matched_threshold : 0.4
        unmatched_threshold : 0.3
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "bus"
        anchor_generator_range: {
          sizes: [2.94046906, 11.1885991, 3.47030982] # wlh
          anchor_ranges: [-50, -50, -0.0715754, 50, 50, -0.0715754]
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
          # custom_values: [0, 0] # velocity vector base value
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "construction_vehicle"
        anchor_generator_range: {
          sizes: [2.73050468, 6.38352896, 3.13312415] # wlh
          anchor_ranges: [-50, -50, -0.08168083, 50, 50, -0.08168083]
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
          # custom_values: [0, 0] # velocity vector base value
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "trailer"
        anchor_generator_range: {
          # sizes: [2.87427237, 12.01320693, 3.81509561] # wlh
          sizes: [3, 15, 3.8, 2, 3, 3.8]
          anchor_ranges: [-50, -50, 0.22228277, 50, 50, 0.22228277]
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
          # custom_values: [0, 0] # velocity vector base value
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "truck"
        anchor_generator_range: {
          sizes: [2.4560939, 6.73778078, 2.73004906] # wlh
          anchor_ranges: [-50, -50, -0.37937912, 50, 50, -0.37937912]
          rotations: [0, 1.57] # DON'T modify this unless you are very familiar with my code.
          # custom_values: [0, 0] # velocity vector base value
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "bicycle"
        no_anchor: {
        }
        matched_threshold : 0.2
        unmatched_threshold : 0.15
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "motorcycle"
        no_anchor: {
        }
        matched_threshold : 0.2
        unmatched_threshold : 0.15
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }
      class_settings: {
        class_name: "pedestrian"
        no_anchor: {
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          distance_similarity: {
            distance_norm: 1.414 # match range
            with_rotation: false
            rotation_alpha: 0.0 # rot error contribution
          }
        }
      }
      class_settings: {
        class_name: "traffic_cone"
        no_anchor: {
        }
        matched_threshold : 0.5
        unmatched_threshold : 0.35
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          distance_similarity: {
            distance_norm: 1.414 # match range
            with_rotation: false
            rotation_alpha: 0.0 # rot error contribution
          }
        }
      }
      class_settings: {
        class_name: "barrier"
        no_anchor: {
        }
        matched_threshold : 0.3
        unmatched_threshold : 0.2
        use_rotate_nms: false
        use_multi_class_nms: false
        nms_pre_max_size: 1000
        nms_post_max_size: 300
        nms_score_threshold: 0.05
        nms_iou_threshold: 0.5
        region_similarity_calculator: {
          nearest_iou_similarity: {}
        }
      }

      sample_positive_fraction : -1
      sample_size : 512
      assign_per_class: false
    }
  }
}

train_input_reader: {
  dataset: {
    dataset_class_name: "NuScenesDataset"
    kitti_info_path: "/home/ecoprt/NuScenes/NuScenes_Train/infos_train.pkl"
    kitti_root_path: "/home/ecoprt/NuScenes/NuScenes_Train"
  }
  
  batch_size: 2
  preprocess: {
    max_number_of_voxels: 25000
    shuffle_points: false
    num_workers: 10
    groundtruth_localization_noise_std: [0, 0, 0]
    groundtruth_rotation_uniform_noise: [0, 0]
    # groundtruth_localization_noise_std: [0.25, 0.25, 0.25]
    # groundtruth_rotation_uniform_noise: [-0.15707963267, 0.15707963267]
    global_rotation_uniform_noise: [0, 0]
    global_scaling_uniform_noise: [1.0, 1.0]
    global_random_rotation_range_per_object: [0, 0]
    global_translate_noise_std: [0.0, 0.0, 0.0]
    anchor_area_threshold: -1
    remove_points_after_sample: true
    groundtruth_points_drop_percentage: 0.0
    groundtruth_drop_max_keep_points: 15
    remove_unknown_examples: false
    sample_importance: 1.0
    random_flip_x: true
    random_flip_y: true
    remove_environment: false
    database_sampler {
      database_info_path: "/home/ecoprt/NuScenes/NuScenes_Train/kitti_dbinfos_train.pkl"
      sample_groups {
        name_to_max_num {
          key: "bus"
          value: 4
        }
      }
      sample_groups {
        name_to_max_num {
          key: "trailer"
          value: 4
        }
      }
      sample_groups {
        name_to_max_num {
          key: "truck"
          value: 4
        }
      }
      global_random_rotation_range_per_object: [0, 0]
      rate: 1.0
    }
  }
}

train_config: {
  optimizer: {
    adam_optimizer: {
      learning_rate: {
        one_cycle: {
          lr_max: 1e-3
          moms: [0.95, 0.85]
          div_factor: 10.0
          pct_start: 0.27
        }
      }
      weight_decay: 0.01
    }
    fixed_weight_decay: true
    use_moving_average: false
  }
  steps: 703250 # 14065 * 50 (28130 // 2 )
  steps_per_eval: 28130 # 5862 # 14065 * 2
  save_checkpoints_secs : 300 # 1800 # half hour
  save_summary_steps : 3000
  enable_mixed_precision: true
  loss_scale_factor: -1
  clear_metrics_every_epoch: true
}

eval_input_reader: {
  dataset: {
    dataset_class_name: "NuScenesDataset"
    kitti_info_path: "/home/ecoprt/NuScenes/NuScenes_Train/infos_val.pkl"
    kitti_root_path: "/home/ecoprt/NuScenes/NuScenes_Train"
  }
  batch_size: 1
  
  preprocess: {
    max_number_of_voxels: 30000
    shuffle_points: false
    num_workers: 1
    anchor_area_threshold: -1
    remove_environment: false
  }
}
